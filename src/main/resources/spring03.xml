<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- This is used with @Autowire in order to print beans by type (in our case Car objects) -->
    <!-- It can be used with a list and will find all the object of the same type or with single object,
         if there are multiple single objects of the same types it will choose the one with the same name
         as the name in the class (for example the Canada class with attribute toronto will choose bean with id toronto) -->
    <!--<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>-->

    <!-- Loading values for the cityconfig.properties file -->
    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="locations" value="carconfig.properties"/>
    </bean>


    <!-- Implementation of Renault class with PostConstruct / PreConstruct annotations-->
    <!--<bean id="renault"
          class="com.example.jbrainspringdemo.Cars.Renault"
          init-method="initialiseRenault"
          destroy-method="destroyRenault">
    </bean>-->
    <bean id="hpR"
          class="com.example.jbrainspringdemo.Cars.HorsePower">
        <property name="hp" value="${renault.hp}"/>
    </bean>
    <bean id="hpR1"
          class="com.example.jbrainspringdemo.Cars.HorsePower">
        <qualifier value="hpRenault"/>
        <property name="hp" value="80"/>
    </bean>

    <!-- Implementation of Fiat class with Component annotations-->
    <!--<bean id="fiat"
          class="com.example.jbrainspringdemo.Cars.Fiat">
    </bean>-->
    <bean id="hpF1"
          class="com.example.jbrainspringdemo.Cars.HorsePower">
        <property name="hp" value="${fiat.hp}"/>
    </bean>
    <bean id="hpF2"
          class="com.example.jbrainspringdemo.Cars.HorsePower">
        <qualifier value="fiatR"/>
        <property name="hp" value="${fiat.hp2}"/>
    </bean>


    <!-- Implementation of Ford class / using messageSource for printing messages -->
    <bean id="hpF3"
          class="com.example.jbrainspringdemo.Cars.HorsePower">
        <qualifier value="fordR"/>
        <property name="hp" value="${ford.hp}"/>
    </bean>

    <!-- This Bean is required to print the messages -->
    <bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames" value="messages"/>
    </bean>
    <!-- Required so the spring knows that it should look in our code (java classes) for beans, not only in the xml -->
    <!-- We also specify which package to look for so there is less look up time (in case of a large project) -->
    <context:component-scan base-package="com.example.jbrainspringdemo.Cars"/>
    <!-- Defines all the related annotations -->
    <context:annotation-config/>

</beans>